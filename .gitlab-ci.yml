stages:
  - Build
  - Package
  - Update-Dashboard

before_script:
  - echo "We are only going to build for amd64 for this demo"
  - sed -i -e '/ linux\/arm/ s/^/#/' hack/lib/golang.sh
  - sed -i -e '/ linux\/s390/ s/^/#/' hack/lib/golang.sh
  - sed -i -e '/ linux\/386/ s/^/#/' hack/lib/golang.sh
  - sed -i -e '/ linux\/ppc64le/ s/^/#/' hack/lib/golang.sh
  - sed -i -e '/ darwin\/amd64/ s/^/#/' hack/lib/golang.sh
  - sed -i -e '/ darwin\/386/ s/^/#/' hack/lib/golang.sh
  - sed -i -e '/ windows\/386/ s/^/#/' hack/lib/golang.sh
  - sed -i -e '/ windows\/amd64/ s/^/#/' hack/lib/golang.sh
  - export BASE_URL=${BASE_URL:-$(echo $CI_PROJECT_URL |  cut -d'/' -f1-3)}
  - export CI_COMMIT_SHA_SHORT=$(echo ${CI_COMMIT_SHA} | cut -c -8)
  - >
    if [ -z "$CROSS_CLOUD_YML" ]; then
      export CROSS_CLOUD_YML="https://raw.githubusercontent.com/CrossCloudCI/cncf-configuration/production/cross-cloud.yml"
    else
      export CROSS_CLOUD_YML="$CROSS_CLOUD_YML"
    fi
  - source /opt/local/etc/rvmrc ; source /opt/local/etc/profile.d/rvm.sh ; cp -a /opt/local/dashboard /dashboard ; pushd /dashboard ; source /opt/local/.env ; ./bin/update_dashboard ; popd


compile:
  image: crosscloudci/debian-docker
  stage: Build
  variables:
    KUBE_RELEASE_RUN_TESTS: "n"
    KUBE_FASTBUILD: "false"
    KUBE_VERBOSE: "0"
    FEDERATION: "false"
  script:
    - export KUBE_DOCKER_REGISTRY="${CI_REGISTRY_IMAGE}"
    - export KUBE_DOCKER_IMAGE_TAG="${CI_COMMIT_REF_SLUG}.${CI_PIPELINE_ID}.${CI_COMMIT_SHA_SHORT}"
    - apt update
    - apt install -y tar rsync git curl make file
    - echo "${KUBE_DOCKER_IMAGE_TAG}"
    - ./build/release.sh
    - cp -a _output/dockerized/bin/linux/amd64 linux-amd64
    - echo export KUBELET_ARTIFACT="$BASE_URL"/kubernetes/kubernetes/-/jobs/${CI_JOB_ID}/artifacts/raw/linux-amd64/kubelet >> release.env
    - cat release.env
  artifacts:
    name: "${CI_JOB_NAME}.${CI_PIPELINE_ID}.${CI_JOB_ID}"
    when: always
    expire_in: 1 weeks
    paths:
      - release.env
      - linux-amd64

container:
  image: crosscloudci/debian-docker
  stage: Package
  dependencies: 
    - compile
  script:
    - export KUBE_DOCKER_REGISTRY="${CI_REGISTRY_IMAGE}"
    - export KUBE_DOCKER_IMAGE_TAG="${CI_COMMIT_REF_SLUG}.${CI_PIPELINE_ID}.${CI_COMMIT_SHA_SHORT}"
    - echo "${KUBE_DOCKER_IMAGE_TAG}"
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker push "$CI_REGISTRY_IMAGE/kube-apiserver-amd64:$KUBE_DOCKER_IMAGE_TAG"
    - docker push "$CI_REGISTRY_IMAGE/kube-controller-manager-amd64:$KUBE_DOCKER_IMAGE_TAG"
    - docker push "$CI_REGISTRY_IMAGE/kube-scheduler-amd64:$KUBE_DOCKER_IMAGE_TAG"
    - docker push "$CI_REGISTRY_IMAGE/kube-proxy-amd64:$KUBE_DOCKER_IMAGE_TAG"
    - docker push "$CI_REGISTRY_IMAGE/kube-aggregator-amd64:$KUBE_DOCKER_IMAGE_TAG"
    - docker push "$CI_REGISTRY_IMAGE/cloud-controller-manager-amd64:$KUBE_DOCKER_IMAGE_TAG"
    - echo export KUBE_APISERVER_IMAGE="$CI_REGISTRY_IMAGE/kube-apiserver-amd64" >> release.env
    - echo export KUBE_APISERVER_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
    - echo export KUBE_CONTROLLER_MANAGER_IMAGE="$CI_REGISTRY_IMAGE/kube-controller-manager-amd64" >> release.env
    - echo export KUBE_CONTROLLER_MANAGER_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
    - echo export KUBE_SCHEDULER_IMAGE="$CI_REGISTRY_IMAGE/kube-scheduler-amd64" >> release.env
    - echo export KUBE_SCHEDULER_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
    - echo export KUBE_PROXY_IMAGE="$CI_REGISTRY_IMAGE/kube-proxy-amd64" >> release.env
    - echo export KUBE_PROXY_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
    - echo export KUBE_AGGREGATOR_IMAGE="$CI_REGISTRY_IMAGE/kube-aggregator-amd64" >> release.env
    - echo export KUBE_AGGREGATOR_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
    - echo export CLOUD_CONTROLLER_IMAGE="$CI_REGISTRY_IMAGE/cloud-controller-manager-amd64" >> release.env
    - echo export CLOUD_CONTROLLER_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
    - echo export DEPLOYMENT_SHA="${CI_COMMIT_REF_SLUG}-${CI_PIPELINE_ID}-${CI_COMMIT_SHA_SHORT}" >> release.env
    - cat release.env
  artifacts:
    name: "${CI_JOB_NAME}.${CI_PIPELINE_ID}.${CI_JOB_ID}"
    when: always
    expire_in: 1 weeks
    paths:
      - release.env

Dashboard:
  image: crosscloudci/debian-go
  stage: Update-Dashboard
  script:
    - echo 'test'
