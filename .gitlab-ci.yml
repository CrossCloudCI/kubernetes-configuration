stages:
  - Build
  - Package
  - Update-Dashboard

before_script:
  - export BASE_URL=${BASE_URL:-$(echo $CI_PROJECT_URL |  cut -d'/' -f1-3)}
  - export CI_COMMIT_SHA_SHORT=$(echo ${CI_COMMIT_SHA} | cut -c -8)
  - >
    if [ -z "$CROSS_CLOUD_YML" ]; then
       if [ "$BASE_URL" == "https://gitlab.cncf.ci" ]; then
          export CROSS_CLOUD_YML="https://raw.githubusercontent.com/CrossCloudCI/cncf-configuration/production/cross-cloud.yml"
       elif [ "$BASE_URL" == "https://gitlab.staging.cncf.ci" ]; then
          export CROSS_CLOUD_YML="https://raw.githubusercontent.com/CrossCloudCI/cncf-configuration/staging/cross-cloud.yml"
       elif [ "$BASE_URL" == "https://gitlab.cidev.cncf.ci" ]; then
          export CROSS_CLOUD_YML="https://raw.githubusercontent.com/CrossCloudCI/cncf-configuration/integration/cross-cloud.yml"
       else
          export CROSS_CLOUD_YML="https://raw.githubusercontent.com/CrossCloudCI/cncf-configuration/master/cross-cloud.yml"
       fi
    else
      export CROSS_CLOUD_YML="$CROSS_CLOUD_YML"
    fi
  - source /opt/local/etc/rvmrc ; source /opt/local/etc/profile.d/rvm.sh ; cp -a /opt/local/dashboard /dashboard ; pushd /dashboard ; source /opt/local/.env ; ./bin/update_dashboard ; popd

compile:
  image: crosscloudci/debian-docker
  stage: Build
  script:
    - apt update
    - apt install -y tar rsync git curl make file net-tools
    # Write build script
    - echo '#!/bin/bash' > kubernetes.sh
    - echo 'set -o errexit' >> kubernetes.sh
    - echo 'set -o nounset' >> kubernetes.sh
    - echo 'set -o pipefail' >> kubernetes.sh
    - echo 'source build/common.sh' >> kubernetes.sh
    - echo 'source build/lib/release.sh' >> kubernetes.sh
    - echo 'kube::build::verify_prereqs' >> kubernetes.sh
    - echo 'kube::build::build_image' >> kubernetes.sh
    - >
      if [ "$ARCH" == "arm64" ]; then
        echo 'ARCH set to arm64'
        echo 'kube::build::run_build_command make all KUBE_BUILD_PLATFORMS=linux/arm64' >> kubernetes.sh
        echo 'kube::build::copy_output' >> kubernetes.sh
      else
        echo 'Default to amd64 (Intel)'
        echo 'kube::build::run_build_command make all KUBE_BUILD_PLATFORMS=linux/amd64' >> kubernetes.sh
        echo 'kube::build::copy_output' >> kubernetes.sh
      fi
    #Run Build
    - chmod +x ./kubernetes.sh 
    - ./kubernetes.sh
    - >
      if [ "$ARCH" == "arm64" ]; then
        echo 'ARCH set to arm64'
        echo export KUBELET_ARTIFACT="$BASE_URL"/kubernetes/kubernetes/-/jobs/${CI_JOB_ID}/artifacts/raw/_output/dockerized/bin/linux/arm64/kubelet >> release.env
        echo export KUBE_APISERVER_ARTIFACT="$BASE_URL"/kubernetes/kubernetes/-/jobs/${CI_JOB_ID}/artifacts/raw/_output/dockerized/bin/linux/arm64/kube-apiserver >> release.env
        echo export KUBE_CONTROLLER_MANAGER_ARTIFACT="$BASE_URL"/kubernetes/kubernetes/-/jobs/${CI_JOB_ID}/artifacts/raw/_output/dockerized/bin/linux/arm64/kube-controller-manager >> release.env
        echo export KUBE_SCHEDULER_ARTIFACT="$BASE_URL"/kubernetes/kubernetes/-/jobs/${CI_JOB_ID}/artifacts/raw/_output/dockerized/bin/linux/arm64/kube-scheduler >> release.env
      else
        echo 'Default to amd64 (Intel)'
        echo export KUBELET_ARTIFACT="$BASE_URL"/kubernetes/kubernetes/-/jobs/${CI_JOB_ID}/artifacts/raw/_output/dockerized/bin/linux/amd64/kubelet >> release.env
        echo export KUBE_APISERVER_ARTIFACT="$BASE_URL"/kubernetes/kubernetes/-/jobs/${CI_JOB_ID}/artifacts/raw/_output/dockerized/bin/linux/amd64/kube-apiserver >> release.env
        echo export KUBE_CONTROLLER_MANAGER_ARTIFACT="$BASE_URL"/kubernetes/kubernetes/-/jobs/${CI_JOB_ID}/artifacts/raw/_output/dockerized/bin/linux/amd64/kube-controller-manager >> release.env
        echo export KUBE_SCHEDULER_ARTIFACT="$BASE_URL"/kubernetes/kubernetes/-/jobs/${CI_JOB_ID}/artifacts/raw/_output/dockerized/bin/linux/amd64/kube-scheduler >> release.env
      fi
    - >
      echo "hyperkube_download_url: $BASE_URL/kubernetes/kubernetes/-/jobs/$CI_JOB_ID/artifacts/raw/_output/dockerized/bin/linux/$ARCH/hyperkube" >> kubespray.env

  artifacts:
    name: "${CI_JOB_NAME}.${CI_PIPELINE_ID}.${CI_JOB_ID}"
    when: always
    expire_in: 1 weeks
    paths:
      - release.env
      - kubespray.env
      - _output/dockerized/bin/linux/

container:
  image: crosscloudci/debian-docker
  stage: Package
  dependencies: 
    - compile
  script:
    - apt update
    - apt install -y tar rsync git curl make file net-tools
    # Determine release
    - >
      if [ "$CI_COMMIT_REF_NAME" == "master" ]; then
         RELEASE=$(curl https://storage.googleapis.com/kubernetes-release-dev/ci/latest.txt | cut -f1 -d"-")
      else
         RELEASE=$(curl https://storage.googleapis.com/kubernetes-release/release/stable.txt)
      fi
    - export KUBE_DOCKER_REGISTRY="$DOCKER_REGISTRY"
    - export KUBE_DOCKER_IMAGE_TAG="${RELEASE}-${CI_COMMIT_REF_NAME}.${CI_COMMIT_SHA_SHORT}.${ARCH}"
    - echo "${KUBE_DOCKER_IMAGE_TAG}"
    - mkdir ~/.docker && echo "$DOCKER_AUTH" > ~/.docker/config.json
    # Write package script
    - echo '#!/bin/bash' > kubernetes.sh
    - echo 'set -o errexit' >> kubernetes.sh
    - echo 'set -o nounset' >> kubernetes.sh
    - echo 'set -o pipefail' >> kubernetes.sh
    - >
      if [ "$ARCH" == "arm64" ]; then
         echo 'ARCH set to arm64'
         echo "sed -i -e '/ linux\/arm$/ s/^/#/' hack/lib/golang.sh" >> kubernetes.sh
         echo "sed -i -e '/ linux\/amd64/ s/^/#/' hack/lib/golang.sh" >> kubernetes.sh
         echo "sed -i -e '/ linux\/s390/ s/^/#/' hack/lib/golang.sh" >> kubernetes.sh
         echo "sed -i -e '/ linux\/386/ s/^/#/' hack/lib/golang.sh" >> kubernetes.sh
         echo "sed -i -e '/ linux\/ppc64le/ s/^/#/' hack/lib/golang.sh" >> kubernetes.sh
         echo "sed -i -e '/ darwin\/amd64/ s/^/#/' hack/lib/golang.sh" >> kubernetes.sh
         echo "sed -i -e '/ darwin\/386/ s/^/#/' hack/lib/golang.sh" >> kubernetes.sh
         echo "sed -i -e '/ windows\/386/ s/^/#/' hack/lib/golang.sh" >> kubernetes.sh
         echo "sed -i -e '/ windows\/amd64/ s/^/#/' hack/lib/golang.sh" >> kubernetes.sh
      else
         echo 'Default to amd64 (Intel)'
         sed -i -e '/ linux\/arm/ s/^/#/' hack/lib/golang.sh
         sed -i -e '/ linux\/s390/ s/^/#/' hack/lib/golang.sh
         sed -i -e '/ linux\/386/ s/^/#/' hack/lib/golang.sh
         sed -i -e '/ linux\/ppc64le/ s/^/#/' hack/lib/golang.sh
         sed -i -e '/ darwin\/amd64/ s/^/#/' hack/lib/golang.sh
         sed -i -e '/ darwin\/386/ s/^/#/' hack/lib/golang.sh
         sed -i -e '/ windows\/386/ s/^/#/' hack/lib/golang.sh
         sed -i -e '/ windows\/amd64/ s/^/#/' hack/lib/golang.sh
      fi
    - echo 'source build/common.sh' >> kubernetes.sh
    - echo 'source build/lib/release.sh' >> kubernetes.sh
    - echo 'kube::build::verify_prereqs' >> kubernetes.sh
    - echo 'kube::release::build_server_images' >> kubernetes.sh
    # Run Package 
    - chmod +x ./kubernetes.sh
    - ./kubernetes.sh
    - docker tag "$KUBE_DOCKER_REGISTRY/kube-apiserver-$ARCH:$KUBE_DOCKER_IMAGE_TAG" "$KUBE_DOCKER_REGISTRY/kube-apiserver:$KUBE_DOCKER_IMAGE_TAG"
    - docker tag "$KUBE_DOCKER_REGISTRY/kube-controller-manager-$ARCH:$KUBE_DOCKER_IMAGE_TAG" "$KUBE_DOCKER_REGISTRY/kube-controller-manager:$KUBE_DOCKER_IMAGE_TAG" 
    - docker tag "$KUBE_DOCKER_REGISTRY/kube-scheduler-$ARCH:$KUBE_DOCKER_IMAGE_TAG" "$KUBE_DOCKER_REGISTRY/kube-scheduler:$KUBE_DOCKER_IMAGE_TAG"
    - docker tag "$KUBE_DOCKER_REGISTRY/kube-proxy-$ARCH:$KUBE_DOCKER_IMAGE_TAG" "$KUBE_DOCKER_REGISTRY/kube-proxy:$KUBE_DOCKER_IMAGE_TAG"
    - docker tag "$KUBE_DOCKER_REGISTRY/cloud-controller-manager-$ARCH:$KUBE_DOCKER_IMAGE_TAG" "$KUBE_DOCKER_REGISTRY/cloud-controller-manager:$KUBE_DOCKER_IMAGE_TAG"
    - docker push "$KUBE_DOCKER_REGISTRY/kube-apiserver:$KUBE_DOCKER_IMAGE_TAG"
    - docker push "$KUBE_DOCKER_REGISTRY/kube-controller-manager:$KUBE_DOCKER_IMAGE_TAG"
    - docker push "$KUBE_DOCKER_REGISTRY/kube-scheduler:$KUBE_DOCKER_IMAGE_TAG"
    - docker push "$KUBE_DOCKER_REGISTRY/kube-proxy:$KUBE_DOCKER_IMAGE_TAG"
    - docker push "$KUBE_DOCKER_REGISTRY/cloud-controller-manager:$KUBE_DOCKER_IMAGE_TAG"
    #Publish pause image
    - make -C ./build/pause/ all-push REGISTRY="${KUBE_DOCKER_REGISTRY}"
    #Push dummy coredns image
    - docker pull coredns/coredns:1.2.6
    - docker tag coredns/coredns:1.2.6 crosscloudci/coredns:1.2.6
    - docker push crosscloudci/coredns:1.2.6
    - docker pull coredns/coredns:1.3.1
    - docker tag coredns/coredns:1.3.1 crosscloudci/coredns:1.3.1
    - docker push crosscloudci/coredns:1.3.1
    - echo export KUBERNETES_VERSION="$KUBE_DOCKER_IMAGE_TAG" >> release.env
    - echo export KUBE_APISERVER_IMAGE="$KUBE_DOCKER_REGISTRY/kube-apiserver" >> release.env
    - echo export KUBE_APISERVER_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
    - echo export KUBE_CONTROLLER_MANAGER_IMAGE="$KUBE_DOCKER_REGISTRY/kube-controller-manager" >> release.env
    - echo export KUBE_CONTROLLER_MANAGER_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
    - echo export KUBE_SCHEDULER_IMAGE="$KUBE_DOCKER_REGISTRY/kube-scheduler" >> release.env
    - echo export KUBE_SCHEDULER_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
    - echo export KUBE_PROXY_IMAGE="$KUBE_DOCKER_REGISTRY/kube-proxy" >> release.env
    - echo export KUBE_PROXY_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
    - echo export CLOUD_CONTROLLER_IMAGE="$KUBE_DOCKER_REGISTRY/cloud-controller-manager" >> release.env
    - echo export CLOUD_CONTROLLER_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
    - echo export DEPLOYMENT_SHA="${CI_PIPELINE_ID}" >> release.env
    - >
      echo "hyperkube_checksums:" >> kubespray.env
    - >
      echo "  $ARCH:" >> kubespray.env
    - >
      echo "    $RELEASE: $(sha256sum _output/dockerized/bin/linux/$ARCH/hyperkube | awk '{ print $1 }')" >> kubespray.env
    - >
      echo "kube_version: $RELEASE" >> kubespray.env
    - >
      echo "kube_image_repo: $KUBE_DOCKER_REGISTRY" >> kubespray.env
    - >
      echo "kube_image_version: $KUBE_DOCKER_IMAGE_TAG" >> kubespray.env 
    - cat release.env
    - cat kubespray.env
  artifacts:
    name: "${CI_JOB_NAME}.${CI_PIPELINE_ID}.${CI_JOB_ID}"
    when: always
    expire_in: 1 weeks
    paths:
      - release.env
      - kubespray.env

Dashboard:
  image: crosscloudci/debian-go
  stage: Update-Dashboard
  dependencies: []
  script:
    - echo 'test'
