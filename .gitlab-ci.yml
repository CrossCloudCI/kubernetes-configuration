stages:
  - Build
  - Package
  - Update-Dashboard

before_script:
  - >
    if [ "$ARCH" == "arm64" ]; then
       echo 'ARCH set to arm64'
       sed -i -e '/ linux\/arm$/ s/^/#/' hack/lib/golang.sh
       sed -i -e '/ linux\/amd64/ s/^/#/' hack/lib/golang.sh
       sed -i -e '/ linux\/s390/ s/^/#/' hack/lib/golang.sh
       sed -i -e '/ linux\/386/ s/^/#/' hack/lib/golang.sh
       sed -i -e '/ linux\/ppc64le/ s/^/#/' hack/lib/golang.sh
       sed -i -e '/ darwin\/amd64/ s/^/#/' hack/lib/golang.sh
       sed -i -e '/ darwin\/386/ s/^/#/' hack/lib/golang.sh
       sed -i -e '/ windows\/386/ s/^/#/' hack/lib/golang.sh
       sed -i -e '/ windows\/amd64/ s/^/#/' hack/lib/golang.sh
    else
      echo 'Default to amd64 (Intel)'
      sed -i -e '/ linux\/arm/ s/^/#/' hack/lib/golang.sh
      sed -i -e '/ linux\/s390/ s/^/#/' hack/lib/golang.sh
      sed -i -e '/ linux\/386/ s/^/#/' hack/lib/golang.sh
      sed -i -e '/ linux\/ppc64le/ s/^/#/' hack/lib/golang.sh
      sed -i -e '/ darwin\/amd64/ s/^/#/' hack/lib/golang.sh
      sed -i -e '/ darwin\/386/ s/^/#/' hack/lib/golang.sh
      sed -i -e '/ windows\/386/ s/^/#/' hack/lib/golang.sh
      sed -i -e '/ windows\/amd64/ s/^/#/' hack/lib/golang.sh
    fi
  - export BASE_URL=${BASE_URL:-$(echo $CI_PROJECT_URL |  cut -d'/' -f1-3)}
  - export CI_COMMIT_SHA_SHORT=$(echo ${CI_COMMIT_SHA} | cut -c -8)
  - >
    if [ -z "$CROSS_CLOUD_YML" ]; then
       if [ "$BASE_URL" == "https://gitlab.cncf.ci" ]; then
          export CROSS_CLOUD_YML="https://raw.githubusercontent.com/CrossCloudCI/cncf-configuration/production/cross-cloud.yml"
       elif [ "$BASE_URL" == "https://gitlab.staging.cncf.ci" ]; then
          export CROSS_CLOUD_YML="https://raw.githubusercontent.com/CrossCloudCI/cncf-configuration/staging/cross-cloud.yml"
       elif [ "$BASE_URL" == "https://gitlab.cidev.cncf.ci" ]; then
          export CROSS_CLOUD_YML="https://raw.githubusercontent.com/CrossCloudCI/cncf-configuration/integration/cross-cloud.yml"
       else
          export CROSS_CLOUD_YML="https://raw.githubusercontent.com/CrossCloudCI/cncf-configuration/master/cross-cloud.yml"
       fi
    else
      export CROSS_CLOUD_YML="$CROSS_CLOUD_YML"
    fi
  - source /opt/local/etc/rvmrc ; source /opt/local/etc/profile.d/rvm.sh ; cp -a /opt/local/dashboard /dashboard ; pushd /dashboard ; source /opt/local/.env ; ./bin/update_dashboard ; popd

compile:
  image: crosscloudci/debian-docker
  stage: Build
  variables:
    # KUBE_RELEASE_RUN_TESTS: "n"
    # KUBE_FASTBUILD: "false"
    # KUBE_VERBOSE: "0"
    # FEDERATION: "false"
  script:
    - apt update
    - apt install -y tar rsync git curl make file net-tools
    # Write build script
    - echo '#!/bin/bash' > kubernetes.sh
    - echo 'set -o errexit' >> kubernetes.sh
    - echo 'set -o nounset' >> kubernetes.sh
    - echo 'set -o pipefail' >> kubernetes.sh
    - echo 'source build/common.sh' >> kubernetes.sh
    - echo 'source build/lib/release.sh' >> kubernetes.sh
    - echo 'kube::build::verify_prereqs' >> kubernetes.sh
    - echo 'kube::build::build_image' >> kubernetes.sh
    - echo 'kube::build::run_build_command make all KUBE_BUILD_PLATFORMS=linux/arm64' >> kubernetes.sh
    # - echo 'kube::build::run_build_command make kubelet KUBE_BUILD_PLATFORMS=linux/arm64' >> kubernetes.sh
    # - echo 'kube::build::run_build_command make kube-controller-manager KUBE_BUILD_PLATFORMS=linux/arm64' >> kubernetes.sh
    # - echo 'kube::build::run_build_command make kube-scheduler KUBE_BUILD_PLATFORMS=linux/arm64' >> kubernetes.sh
    # - echo 'kube::build::run_build_command make kube-apiserver KUBE_BUILD_PLATFORMS=linux/arm64' >> kubernetes.sh
    # - echo 'kube::build::run_build_command make kube-proxy KUBE_BUILD_PLATFORMS=linux/arm64' >> kubernetes.sh
    # - echo 'kube::build::run_build_command make cloud-controller-manager KUBE_BUILD_PLATFORMS=linux/arm64' >> kubernetes.sh
    # - echo 'kube::build::run_build_command make hyperkube KUBE_BUILD_PLATFORMS=linux/arm64' >> kubernetes.sh
    - echo 'kube::build::copy_output' >> kubernetes.sh
    - echo 'kube::release::build_server_images KUBE_SERVER_PLATFORMS=linux/arm64' >> kubernetes.sh
    #Run Build
    - chmod +x ./kubernetes.sh 
    - ./kubernetes.sh
    
  artifacts:
    name: "${CI_JOB_NAME}.${CI_PIPELINE_ID}.${CI_JOB_ID}"
    when: always
    expire_in: 1 weeks
    paths:
      - release.env
      - linux-amd64
      - linux-arm64

container-aufs:
  tags:
    - aufs
  image: crosscloudci/debian-docker
  stage: Package
  script:
    - >
      if [ "$CI_COMMIT_REF_NAME" == "master" ]; then
        export KUBE_DOCKER_REGISTRY="${CI_REGISTRY_IMAGE}"
        export KUBE_DOCKER_IMAGE_TAG="${CI_COMMIT_REF_SLUG}.${CI_PIPELINE_ID}.${CI_COMMIT_SHA_SHORT}"
        echo "${KUBE_DOCKER_IMAGE_TAG}"
        docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
        if [ "$ARCH" == "arm64" ]; then
          docker push "$CI_REGISTRY_IMAGE/kube-apiserver-arm64:$KUBE_DOCKER_IMAGE_TAG"
          docker push "$CI_REGISTRY_IMAGE/kube-controller-manager-arm64:$KUBE_DOCKER_IMAGE_TAG"
          docker push "$CI_REGISTRY_IMAGE/kube-scheduler-arm64:$KUBE_DOCKER_IMAGE_TAG"
          docker push "$CI_REGISTRY_IMAGE/kube-proxy-arm64:$KUBE_DOCKER_IMAGE_TAG"
          docker push "$CI_REGISTRY_IMAGE/cloud-controller-manager-arm64:$KUBE_DOCKER_IMAGE_TAG"
          echo export KUBE_APISERVER_IMAGE="$CI_REGISTRY_IMAGE/kube-apiserver-arm64" >> release.env
          echo export KUBE_APISERVER_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
          echo export KUBE_CONTROLLER_MANAGER_IMAGE="$CI_REGISTRY_IMAGE/kube-controller-manager-arm64" >> release.env
          echo export KUBE_CONTROLLER_MANAGER_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
          echo export KUBE_SCHEDULER_IMAGE="$CI_REGISTRY_IMAGE/kube-scheduler-arm64" >> release.env
          echo export KUBE_SCHEDULER_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
          echo export KUBE_PROXY_IMAGE="$CI_REGISTRY_IMAGE/kube-proxy-arm64" >> release.env
          echo export KUBE_PROXY_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
          echo export CLOUD_CONTROLLER_IMAGE="$CI_REGISTRY_IMAGE/cloud-controller-manager-arm64" >> release.env
          echo export CLOUD_CONTROLLER_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
        else
          echo 'No ARCH set, defaulting to amd64'
          docker push "$CI_REGISTRY_IMAGE/kube-apiserver-amd64:$KUBE_DOCKER_IMAGE_TAG"
          docker push "$CI_REGISTRY_IMAGE/kube-controller-manager-amd64:$KUBE_DOCKER_IMAGE_TAG"
          docker push "$CI_REGISTRY_IMAGE/kube-scheduler-amd64:$KUBE_DOCKER_IMAGE_TAG"
          docker push "$CI_REGISTRY_IMAGE/kube-proxy-amd64:$KUBE_DOCKER_IMAGE_TAG"
          docker push "$CI_REGISTRY_IMAGE/cloud-controller-manager-amd64:$KUBE_DOCKER_IMAGE_TAG"
          echo export KUBE_APISERVER_IMAGE="$CI_REGISTRY_IMAGE/kube-apiserver-amd64" >> release.env
          echo export KUBE_APISERVER_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
          echo export KUBE_CONTROLLER_MANAGER_IMAGE="$CI_REGISTRY_IMAGE/kube-controller-manager-amd64" >> release.env
          echo export KUBE_CONTROLLER_MANAGER_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
          echo export KUBE_SCHEDULER_IMAGE="$CI_REGISTRY_IMAGE/kube-scheduler-amd64" >> release.env
          echo export KUBE_SCHEDULER_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
          echo export KUBE_PROXY_IMAGE="$CI_REGISTRY_IMAGE/kube-proxy-amd64" >> release.env
          echo export KUBE_PROXY_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
          echo export CLOUD_CONTROLLER_IMAGE="$CI_REGISTRY_IMAGE/cloud-controller-manager-amd64" >> release.env
          echo export CLOUD_CONTROLLER_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
          echo export DEPLOYMENT_SHA="${CI_PIPELINE_ID}" >> release.env
        fi
        cat release.env
      else
        echo "This is stable, skip aufs build"
        exit 0
      fi
  artifacts:
    name: "${CI_JOB_NAME}.${CI_PIPELINE_ID}.${CI_JOB_ID}"
    when: always
    expire_in: 1 weeks
    paths:
      - release.env


container-overlayfs:
  tags:
    - overlayfs
  image: crosscloudci/debian-docker
  stage: Package
  script:
    - >
      if [ "$CI_COMMIT_REF_NAME" == "master" ]; then
        echo "This is master, skip overlayfs build"
        exit 0
      else
        export KUBE_DOCKER_REGISTRY="${CI_REGISTRY_IMAGE}"
        export KUBE_DOCKER_IMAGE_TAG="${CI_COMMIT_REF_SLUG}.${CI_PIPELINE_ID}.${CI_COMMIT_SHA_SHORT}"
        echo "${KUBE_DOCKER_IMAGE_TAG}"
        docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
        if [ "$ARCH" == "arm64" ]; then
          docker push "$CI_REGISTRY_IMAGE/kube-apiserver-arm64:$KUBE_DOCKER_IMAGE_TAG"
          docker push "$CI_REGISTRY_IMAGE/kube-controller-manager-arm64:$KUBE_DOCKER_IMAGE_TAG"
          docker push "$CI_REGISTRY_IMAGE/kube-scheduler-arm64:$KUBE_DOCKER_IMAGE_TAG"
          docker push "$CI_REGISTRY_IMAGE/kube-proxy-arm64:$KUBE_DOCKER_IMAGE_TAG"
          docker push "$CI_REGISTRY_IMAGE/cloud-controller-manager-arm64:$KUBE_DOCKER_IMAGE_TAG"
          echo export KUBE_APISERVER_IMAGE="$CI_REGISTRY_IMAGE/kube-apiserver-arm64" >> release.env
          echo export KUBE_APISERVER_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
          echo export KUBE_CONTROLLER_MANAGER_IMAGE="$CI_REGISTRY_IMAGE/kube-controller-manager-arm64" >> release.env
          echo export KUBE_CONTROLLER_MANAGER_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
          echo export KUBE_SCHEDULER_IMAGE="$CI_REGISTRY_IMAGE/kube-scheduler-arm64" >> release.env
          echo export KUBE_SCHEDULER_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
          echo export KUBE_PROXY_IMAGE="$CI_REGISTRY_IMAGE/kube-proxy-arm64" >> release.env
          echo export KUBE_PROXY_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
          echo export CLOUD_CONTROLLER_IMAGE="$CI_REGISTRY_IMAGE/cloud-controller-manager-arm64" >> release.env
          echo export CLOUD_CONTROLLER_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
        else
          echo 'No ARCH set, defaulting to amd64'
          docker push "$CI_REGISTRY_IMAGE/kube-apiserver-amd64:$KUBE_DOCKER_IMAGE_TAG"
          docker push "$CI_REGISTRY_IMAGE/kube-controller-manager-amd64:$KUBE_DOCKER_IMAGE_TAG"
          docker push "$CI_REGISTRY_IMAGE/kube-scheduler-amd64:$KUBE_DOCKER_IMAGE_TAG"
          docker push "$CI_REGISTRY_IMAGE/kube-proxy-amd64:$KUBE_DOCKER_IMAGE_TAG"
          docker push "$CI_REGISTRY_IMAGE/cloud-controller-manager-amd64:$KUBE_DOCKER_IMAGE_TAG"
          echo export KUBE_APISERVER_IMAGE="$CI_REGISTRY_IMAGE/kube-apiserver-amd64" >> release.env
          echo export KUBE_APISERVER_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
          echo export KUBE_CONTROLLER_MANAGER_IMAGE="$CI_REGISTRY_IMAGE/kube-controller-manager-amd64" >> release.env
          echo export KUBE_CONTROLLER_MANAGER_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
          echo export KUBE_SCHEDULER_IMAGE="$CI_REGISTRY_IMAGE/kube-scheduler-amd64" >> release.env
          echo export KUBE_SCHEDULER_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
          echo export KUBE_PROXY_IMAGE="$CI_REGISTRY_IMAGE/kube-proxy-amd64" >> release.env
          echo export KUBE_PROXY_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
          echo export CLOUD_CONTROLLER_IMAGE="$CI_REGISTRY_IMAGE/cloud-controller-manager-amd64" >> release.env
          echo export CLOUD_CONTROLLER_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
          echo export DEPLOYMENT_SHA="${CI_PIPELINE_ID}" >> release.env
        fi
        cat release.env
      fi
  artifacts:
    name: "${CI_JOB_NAME}.${CI_PIPELINE_ID}.${CI_JOB_ID}"
    when: always
    expire_in: 1 weeks
    paths:
      - release.env

Dashboard:
  image: crosscloudci/debian-go
  stage: Update-Dashboard
  script:
    - echo 'test'
